{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Python integration with Xautomata API</p>"},{"location":"#xautomata-kronos","title":"XAutomata Kronos","text":"<p>Pacchetto che fornisce una metodologia molto semplificata nell'uso dei tempi</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the terms of the MIT license.</p>"},{"location":"Kronos.converters/","title":"Kronos.converters","text":""},{"location":"Kronos.converters/#Kronos.converters.Converters","title":"<code>Converters</code>","text":"Source code in <code>Kronos/converters.py</code> <pre><code>class Converters:\n\n    def __init__(self, dt=None, td=None):\n        self.dt = dt\n        self.td = td\n\n    def date(self) -&gt; date:\n        \"\"\"\n        return the datetime.date from kronos\n\n        Returns:\n            datetime.date\n        \"\"\"\n        return self.dt.date()\n\n    def datetime(self) -&gt; datetime:\n        \"\"\"\n        return the datetime.datetime from kronos\n\n        Returns:\n            datetime\n        \"\"\"\n        return self.dt\n\n    def isoformat(self) -&gt; str:\n        \"\"\"\n        return the isoformat from kronos\n\n        Returns:\n            str\n        \"\"\"\n        return self.dt.isoformat()\n\n    def iso(self) -&gt; str:\n        \"\"\"\n        return the isoformat from kronos\n\n        Returns:\n             str\n        \"\"\"\n        return self.isoformat()\n\n    def timestamp(self) -&gt; float:\n        \"\"\"\n        return the timestamp from kronos\n\n        Returns:\n             float\n        \"\"\"\n        return self.dt.timestamp()\n\n    def ts(self) -&gt; float:\n        \"\"\"\n        return the timestamp from kronos\n\n        Returns:\n             float\n        \"\"\"\n        return self.timestamp()\n\n    def timedelta(self) -&gt; timedelta:\n        \"\"\"\n        return the timedelta from kronos\n\n        Returns:\n             timedelta\n        \"\"\"\n        return self.td\n\n    def td(self) -&gt; timedelta:\n        \"\"\"\n        return the timedelta from kronos\n\n        Returns:\n             timedelta\n        \"\"\"\n        return self.td\n\n    def time(self) -&gt; time:\n        \"\"\"\n        return the time from kronos\n\n        Returns:\n             Time\n        \"\"\"\n        # t = self.dt.time()\n        # t.tzinfo = self.dt.tzinfo\n        return time(hour=self.dt.hour, minute=self.dt.minute, second=self.dt.second, microsecond=self.dt.microsecond, tzinfo=self.dt.tzinfo)\n\n    def move_tz(self, tz:TimeZones) -&gt; Kronos:\n        \"\"\"\n        modify the time accordingly to a new timezone\n\n        Args:\n            tz: Timezone.\n\n        Returns:\n            Kronos\n        \"\"\"\n        tz = TimeZones(self.dt.replace(tzinfo=None)).zone(tz)\n        new_kronos = self.__class__()\n        new_kronos.dt = self.dt.astimezone(tz=tz)\n        return new_kronos\n\n    def replace_tz(self, tz:TimeZones) -&gt; Kronos:\n        \"\"\"\n        overwrite the timezone\n\n        Args:\n            tz: Timezone.\n\n        Returns:\n            Kronos\n        \"\"\"\n        tz = TimeZones(self.dt.replace(tzinfo=None)).zone(tz)\n        new_kronos = self.__class__()\n        new_kronos.dt = self.dt.replace(tzinfo=tz)\n        return new_kronos\n\n    def remove_tz(self) -&gt; Kronos:\n        \"\"\"\n        Remove the timezone from the Kronos element. Useful only when the naive-timezone is mandatory.\n\n        Returns:\n            Kronos\n        \"\"\"\n        new_kronos = self.__class__()\n        new_kronos.dt = self.dt.replace(tzinfo=None)\n        return new_kronos\n</code></pre>"},{"location":"Kronos.converters/#Kronos.converters.Converters.date","title":"<code>date()</code>","text":"<p>return the datetime.date from kronos</p> <p>Returns:</p> Type Description <code>date</code> <p>datetime.date</p> Source code in <code>Kronos/converters.py</code> <pre><code>def date(self) -&gt; date:\n    \"\"\"\n    return the datetime.date from kronos\n\n    Returns:\n        datetime.date\n    \"\"\"\n    return self.dt.date()\n</code></pre>"},{"location":"Kronos.converters/#Kronos.converters.Converters.datetime","title":"<code>datetime()</code>","text":"<p>return the datetime.datetime from kronos</p> <p>Returns:</p> Type Description <code>datetime</code> <p>datetime</p> Source code in <code>Kronos/converters.py</code> <pre><code>def datetime(self) -&gt; datetime:\n    \"\"\"\n    return the datetime.datetime from kronos\n\n    Returns:\n        datetime\n    \"\"\"\n    return self.dt\n</code></pre>"},{"location":"Kronos.converters/#Kronos.converters.Converters.iso","title":"<code>iso()</code>","text":"<p>return the isoformat from kronos</p> <p>Returns:</p> Type Description <code>str</code> <p>str</p> Source code in <code>Kronos/converters.py</code> <pre><code>def iso(self) -&gt; str:\n    \"\"\"\n    return the isoformat from kronos\n\n    Returns:\n         str\n    \"\"\"\n    return self.isoformat()\n</code></pre>"},{"location":"Kronos.converters/#Kronos.converters.Converters.isoformat","title":"<code>isoformat()</code>","text":"<p>return the isoformat from kronos</p> <p>Returns:</p> Type Description <code>str</code> <p>str</p> Source code in <code>Kronos/converters.py</code> <pre><code>def isoformat(self) -&gt; str:\n    \"\"\"\n    return the isoformat from kronos\n\n    Returns:\n        str\n    \"\"\"\n    return self.dt.isoformat()\n</code></pre>"},{"location":"Kronos.converters/#Kronos.converters.Converters.move_tz","title":"<code>move_tz(tz)</code>","text":"<p>modify the time accordingly to a new timezone</p> <p>Parameters:</p> Name Type Description Default <code>tz</code> <code>TimeZones</code> <p>Timezone.</p> required <p>Returns:</p> Type Description <code>Kronos</code> <p>Kronos</p> Source code in <code>Kronos/converters.py</code> <pre><code>def move_tz(self, tz:TimeZones) -&gt; Kronos:\n    \"\"\"\n    modify the time accordingly to a new timezone\n\n    Args:\n        tz: Timezone.\n\n    Returns:\n        Kronos\n    \"\"\"\n    tz = TimeZones(self.dt.replace(tzinfo=None)).zone(tz)\n    new_kronos = self.__class__()\n    new_kronos.dt = self.dt.astimezone(tz=tz)\n    return new_kronos\n</code></pre>"},{"location":"Kronos.converters/#Kronos.converters.Converters.remove_tz","title":"<code>remove_tz()</code>","text":"<p>Remove the timezone from the Kronos element. Useful only when the naive-timezone is mandatory.</p> <p>Returns:</p> Type Description <code>Kronos</code> <p>Kronos</p> Source code in <code>Kronos/converters.py</code> <pre><code>def remove_tz(self) -&gt; Kronos:\n    \"\"\"\n    Remove the timezone from the Kronos element. Useful only when the naive-timezone is mandatory.\n\n    Returns:\n        Kronos\n    \"\"\"\n    new_kronos = self.__class__()\n    new_kronos.dt = self.dt.replace(tzinfo=None)\n    return new_kronos\n</code></pre>"},{"location":"Kronos.converters/#Kronos.converters.Converters.replace_tz","title":"<code>replace_tz(tz)</code>","text":"<p>overwrite the timezone</p> <p>Parameters:</p> Name Type Description Default <code>tz</code> <code>TimeZones</code> <p>Timezone.</p> required <p>Returns:</p> Type Description <code>Kronos</code> <p>Kronos</p> Source code in <code>Kronos/converters.py</code> <pre><code>def replace_tz(self, tz:TimeZones) -&gt; Kronos:\n    \"\"\"\n    overwrite the timezone\n\n    Args:\n        tz: Timezone.\n\n    Returns:\n        Kronos\n    \"\"\"\n    tz = TimeZones(self.dt.replace(tzinfo=None)).zone(tz)\n    new_kronos = self.__class__()\n    new_kronos.dt = self.dt.replace(tzinfo=tz)\n    return new_kronos\n</code></pre>"},{"location":"Kronos.converters/#Kronos.converters.Converters.td","title":"<code>td()</code>","text":"<p>return the timedelta from kronos</p> <p>Returns:</p> Type Description <code>timedelta</code> <p>timedelta</p> Source code in <code>Kronos/converters.py</code> <pre><code>def td(self) -&gt; timedelta:\n    \"\"\"\n    return the timedelta from kronos\n\n    Returns:\n         timedelta\n    \"\"\"\n    return self.td\n</code></pre>"},{"location":"Kronos.converters/#Kronos.converters.Converters.time","title":"<code>time()</code>","text":"<p>return the time from kronos</p> <p>Returns:</p> Type Description <code>time</code> <p>Time</p> Source code in <code>Kronos/converters.py</code> <pre><code>def time(self) -&gt; time:\n    \"\"\"\n    return the time from kronos\n\n    Returns:\n         Time\n    \"\"\"\n    # t = self.dt.time()\n    # t.tzinfo = self.dt.tzinfo\n    return time(hour=self.dt.hour, minute=self.dt.minute, second=self.dt.second, microsecond=self.dt.microsecond, tzinfo=self.dt.tzinfo)\n</code></pre>"},{"location":"Kronos.converters/#Kronos.converters.Converters.timedelta","title":"<code>timedelta()</code>","text":"<p>return the timedelta from kronos</p> <p>Returns:</p> Type Description <code>timedelta</code> <p>timedelta</p> Source code in <code>Kronos/converters.py</code> <pre><code>def timedelta(self) -&gt; timedelta:\n    \"\"\"\n    return the timedelta from kronos\n\n    Returns:\n         timedelta\n    \"\"\"\n    return self.td\n</code></pre>"},{"location":"Kronos.converters/#Kronos.converters.Converters.timestamp","title":"<code>timestamp()</code>","text":"<p>return the timestamp from kronos</p> <p>Returns:</p> Type Description <code>float</code> <p>float</p> Source code in <code>Kronos/converters.py</code> <pre><code>def timestamp(self) -&gt; float:\n    \"\"\"\n    return the timestamp from kronos\n\n    Returns:\n         float\n    \"\"\"\n    return self.dt.timestamp()\n</code></pre>"},{"location":"Kronos.converters/#Kronos.converters.Converters.ts","title":"<code>ts()</code>","text":"<p>return the timestamp from kronos</p> <p>Returns:</p> Type Description <code>float</code> <p>float</p> Source code in <code>Kronos/converters.py</code> <pre><code>def ts(self) -&gt; float:\n    \"\"\"\n    return the timestamp from kronos\n\n    Returns:\n         float\n    \"\"\"\n    return self.timestamp()\n</code></pre>"},{"location":"Kronos.costructors/","title":"Kronos.costructors","text":""},{"location":"Kronos.costructors/#Kronos.costructors.Costructors","title":"<code>Costructors</code>","text":"<p>               Bases: <code>sliders</code></p> Source code in <code>Kronos/costructors.py</code> <pre><code>class Costructors(sliders):\n\n    def __init__(self, dt=None, tz=None, td=None):\n\n        dt = datetime_kronos(dt, tz)\n\n        self.dt = dt  # datetime\n        self.td = td  # timedelta\n\n    @classmethod\n    def now(cls, tz:TimeZones=None) -&gt; Kronos:\n        \"\"\"\n        Produce the Kronos version of the current datetime\n\n        Args:\n            tz: Timezone. Default to UTC\n\n        Returns:\n            Kronos\n        \"\"\"\n        # if isinstance(tz, str): tz = TimeZones(datetime.now()).dict_zones[tz]\n        return cls(datetime.now(), tz=tz)\n\n    @classmethod\n    def today(cls, tz:TimeZones=None) -&gt; Kronos:\n        \"\"\"\n        Produce the Kronos version of the current day\n\n        Args:\n            tz: Timezone. Default to UTC\n\n        Returns:\n            Kronos\n        \"\"\"\n        # if isinstance(tz, str): tz = TimeZones.dict_zones[tz]\n        return cls.now(tz).start_of_day()\n\n    @classmethod\n    def primetime(cls, year:int, month:int=1, day:int=1, hour:int=0, minute:int=0, second:int=0, microsecond:int=0, tz:TimeZones=None) -&gt; Kronos:\n        \"\"\"\n        Procude the Kronos element of a specified datetime\n\n        Args:\n            year (int): year\n            month (int): month\n            day (int): day\n            hour (int): hour\n            minute (int): minute\n            second (int): second\n            microsecond (int): microsecond\n            tz: Timezone. Default to UTC\n\n        Returns:\n            Kronos\n        \"\"\"\n        return cls(datetime(year=year, month=month, day=day, hour=hour, minute=minute, second=second,\n                            microsecond=microsecond), tz=tz)\n\n    @classmethod\n    def from_isoformat(cls, iso: str, tz:TimeZones=None) -&gt; Kronos:\n        \"\"\"\n        Convert isoformat string to Kronos\n\n        Args:\n            iso (str): isoformat string\n            tz: Timezone. Default to UTC\n\n        Returns:\n            Kronos\n        \"\"\"\n        # if isinstance(tz, str): tz = TimeZones.dict_zones[tz]\n        try:\n            iso = iso.replace('Z', '+00:00') if 'Z' in iso else iso  # necessario perche con python &lt; 3.11 non veniva gestita la Z\n            dt = datetime.fromisoformat(iso)\n            return cls(dt, tz=tz)\n        except:\n            t = time.fromisoformat(iso)\n            return cls(t, tz=tz)\n\n    @classmethod\n    def from_iso(cls, iso:str, tz:TimeZones=None) -&gt; Kronos:\n        \"\"\"\n        Convert isoformat string to Kronos\n\n        Args:\n            iso (str): isoformat string\n            tz: Timezone. Default to UTC\n\n        Returns:\n             Kronos\n        \"\"\"\n        return cls.from_isoformat(iso, tz)\n\n    @classmethod\n    def from_timestamp(cls, timestamp:float, tz:TimeZones=None) -&gt; Kronos:\n        \"\"\"\n        convert a timestamp to Kronos\n\n        Args:\n            timestamp (int): timestamp\n            tz: Timezone. Default to UTC\n\n        Returns:\n            Kronos\n        \"\"\"\n        dt = datetime.fromtimestamp(timestamp, tz=TimeZones.utc)\n        tz = TimeZones(dt).zone(tz)\n        if tz is not None: dt = dt.astimezone(tz=tz)\n        return cls(dt)\n\n    @classmethod\n    def from_ts(cls, timestamp:float, tz:TimeZones=None) -&gt; Kronos:\n        \"\"\"\n        convert a timestamp to Kronos\n\n        Args:\n            timestamp (int): timestamp\n            tz: Timezone. Default to UTC\n\n        Returns:\n            Kronos\n        \"\"\"\n        return cls.from_timestamp(timestamp, tz)\n\n    @classmethod\n    def from_datetime(cls, dt: [datetime, date], tz:TimeZones=None) -&gt; Kronos:\n        \"\"\"\n        convert a datetime or date to Kronos\n\n        Args:\n            dt (datetime, date): valid for both date and datetime\n            tz: Timezone. Default to UTC\n\n        Returns:\n            Kronos\n        \"\"\"\n        # if isinstance(tz, str): tz = TimeZones.dict_zones[tz]\n        # if tz is None: tz = TimeZones.rome\n        return cls(dt, tz=tz)\n\n    @classmethod\n    def from_date(cls, dt: [datetime, date], tz:TimeZones=None) -&gt; Kronos:\n        \"\"\"\n        convert a datetime or date to Kronos\n\n        Args:\n            dt (datetime, date): valid for both date and datetime\n            tz: Timezone. Default to UTC\n\n        Returns:\n            Kronos\n        \"\"\"\n        return cls.from_datetime(dt, tz=tz)\n\n    @classmethod\n    def from_dt(cls, dt: [datetime, date], tz:TimeZones=None) -&gt; Kronos:\n        \"\"\"\n        convert a datetime or date to Kronos\n\n        Args:\n            dt (datetime, date): valid for both date and datetime\n            tz: Timezone. Default to UTC\n\n        Returns:\n             Kronos\n        \"\"\"\n        cls.from_datetime(dt, tz=tz)\n\n    @classmethod\n    def from_timedelta(cls, td: [timedelta]) -&gt; Kronos:\n        \"\"\"\n        convert a timedelta to Kronos\n\n        Args:\n            td (timedelta): timedelta\n\n        Returns:\n            Kronos\n        \"\"\"\n        return cls(td=td)\n\n    @classmethod\n    def from_td(cls, td: [timedelta]) -&gt; Kronos:\n        \"\"\"\n        convert a timedelta to Kronos\n\n        Args:\n            td (timedelta): timedelta\n\n        Returns:\n            Kronos\n        \"\"\"\n        return cls(td=td)\n\n    @classmethod\n    def from_time(cls, t: [time], tz:TimeZones=None) -&gt; Kronos:\n        \"\"\"\n        convert a timedelta to Kronos\n\n        Args:\n            t (time): valid for time, with and without TimeZone\n            tz: Timezone. Default to UTC\n\n        Returns:\n             Kronos\n        \"\"\"\n        return cls(t, tz=tz)\n\n    @classmethod\n    def from_format(cls, string: str, format: str, tz: TimeZones=None) -&gt; Kronos:\n        \"\"\"\n        convert a string with a given format to Kronos\n\n        Args:\n            string (str): string with a date\n            format (str): format of the string\n            tz: Timezone. Default to UTC\n\n        Returns:\n            Kronos\n        \"\"\"\n        return cls(datetime.strptime(string, format), tz=tz)\n\n    @classmethod\n    def from_list_iso_to_datetime(cls, list_iso: List[str], tz:TimeZones=None) -&gt; List[datetime]:\n        \"\"\"\n        convert a list of string with isoformat into a list of datetime\n\n        Args:\n            list_iso (list[str]): list of isoformat string\n            tz: Timezone. Default to UTC\n\n        Returns:\n             list[datetime]\n        \"\"\"\n        # if isinstance(tz, str): tz = TimeZones.dict_zones[tz]\n\n        def iso_datetime(iso):\n            return cls.from_iso(iso, tz).dt\n\n        return list(map(iso_datetime, list_iso))\n\n    @classmethod\n    def from_list_iso(cls, list_iso:List[str], tz:TimeZones=None):\n        \"\"\"\n        convert a list of string with isoformat into a list of Kronos\n\n        Args:\n            list_iso (list[str]): list of isoformat string\n            tz: Timezone. Default to UTC\n\n        Returns:\n            list[Kronos]\n        \"\"\"\n        # if isinstance(tz, str): tz = TimeZones.dict_zones[tz]\n\n        def iso_kronos(iso):\n            return cls.from_iso(iso, tz)\n\n        return list(map(iso_kronos, list_iso))\n</code></pre>"},{"location":"Kronos.costructors/#Kronos.costructors.Costructors.from_date","title":"<code>from_date(dt, tz=None)</code>  <code>classmethod</code>","text":"<p>convert a datetime or date to Kronos</p> <p>Parameters:</p> Name Type Description Default <code>dt</code> <code>(datetime, date)</code> <p>valid for both date and datetime</p> required <code>tz</code> <code>TimeZones</code> <p>Timezone. Default to UTC</p> <code>None</code> <p>Returns:</p> Type Description <code>Kronos</code> <p>Kronos</p> Source code in <code>Kronos/costructors.py</code> <pre><code>@classmethod\ndef from_date(cls, dt: [datetime, date], tz:TimeZones=None) -&gt; Kronos:\n    \"\"\"\n    convert a datetime or date to Kronos\n\n    Args:\n        dt (datetime, date): valid for both date and datetime\n        tz: Timezone. Default to UTC\n\n    Returns:\n        Kronos\n    \"\"\"\n    return cls.from_datetime(dt, tz=tz)\n</code></pre>"},{"location":"Kronos.costructors/#Kronos.costructors.Costructors.from_datetime","title":"<code>from_datetime(dt, tz=None)</code>  <code>classmethod</code>","text":"<p>convert a datetime or date to Kronos</p> <p>Parameters:</p> Name Type Description Default <code>dt</code> <code>(datetime, date)</code> <p>valid for both date and datetime</p> required <code>tz</code> <code>TimeZones</code> <p>Timezone. Default to UTC</p> <code>None</code> <p>Returns:</p> Type Description <code>Kronos</code> <p>Kronos</p> Source code in <code>Kronos/costructors.py</code> <pre><code>@classmethod\ndef from_datetime(cls, dt: [datetime, date], tz:TimeZones=None) -&gt; Kronos:\n    \"\"\"\n    convert a datetime or date to Kronos\n\n    Args:\n        dt (datetime, date): valid for both date and datetime\n        tz: Timezone. Default to UTC\n\n    Returns:\n        Kronos\n    \"\"\"\n    # if isinstance(tz, str): tz = TimeZones.dict_zones[tz]\n    # if tz is None: tz = TimeZones.rome\n    return cls(dt, tz=tz)\n</code></pre>"},{"location":"Kronos.costructors/#Kronos.costructors.Costructors.from_dt","title":"<code>from_dt(dt, tz=None)</code>  <code>classmethod</code>","text":"<p>convert a datetime or date to Kronos</p> <p>Parameters:</p> Name Type Description Default <code>dt</code> <code>(datetime, date)</code> <p>valid for both date and datetime</p> required <code>tz</code> <code>TimeZones</code> <p>Timezone. Default to UTC</p> <code>None</code> <p>Returns:</p> Type Description <code>Kronos</code> <p>Kronos</p> Source code in <code>Kronos/costructors.py</code> <pre><code>@classmethod\ndef from_dt(cls, dt: [datetime, date], tz:TimeZones=None) -&gt; Kronos:\n    \"\"\"\n    convert a datetime or date to Kronos\n\n    Args:\n        dt (datetime, date): valid for both date and datetime\n        tz: Timezone. Default to UTC\n\n    Returns:\n         Kronos\n    \"\"\"\n    cls.from_datetime(dt, tz=tz)\n</code></pre>"},{"location":"Kronos.costructors/#Kronos.costructors.Costructors.from_format","title":"<code>from_format(string, format, tz=None)</code>  <code>classmethod</code>","text":"<p>convert a string with a given format to Kronos</p> <p>Parameters:</p> Name Type Description Default <code>string</code> <code>str</code> <p>string with a date</p> required <code>format</code> <code>str</code> <p>format of the string</p> required <code>tz</code> <code>TimeZones</code> <p>Timezone. Default to UTC</p> <code>None</code> <p>Returns:</p> Type Description <code>Kronos</code> <p>Kronos</p> Source code in <code>Kronos/costructors.py</code> <pre><code>@classmethod\ndef from_format(cls, string: str, format: str, tz: TimeZones=None) -&gt; Kronos:\n    \"\"\"\n    convert a string with a given format to Kronos\n\n    Args:\n        string (str): string with a date\n        format (str): format of the string\n        tz: Timezone. Default to UTC\n\n    Returns:\n        Kronos\n    \"\"\"\n    return cls(datetime.strptime(string, format), tz=tz)\n</code></pre>"},{"location":"Kronos.costructors/#Kronos.costructors.Costructors.from_iso","title":"<code>from_iso(iso, tz=None)</code>  <code>classmethod</code>","text":"<p>Convert isoformat string to Kronos</p> <p>Parameters:</p> Name Type Description Default <code>iso</code> <code>str</code> <p>isoformat string</p> required <code>tz</code> <code>TimeZones</code> <p>Timezone. Default to UTC</p> <code>None</code> <p>Returns:</p> Type Description <code>Kronos</code> <p>Kronos</p> Source code in <code>Kronos/costructors.py</code> <pre><code>@classmethod\ndef from_iso(cls, iso:str, tz:TimeZones=None) -&gt; Kronos:\n    \"\"\"\n    Convert isoformat string to Kronos\n\n    Args:\n        iso (str): isoformat string\n        tz: Timezone. Default to UTC\n\n    Returns:\n         Kronos\n    \"\"\"\n    return cls.from_isoformat(iso, tz)\n</code></pre>"},{"location":"Kronos.costructors/#Kronos.costructors.Costructors.from_isoformat","title":"<code>from_isoformat(iso, tz=None)</code>  <code>classmethod</code>","text":"<p>Convert isoformat string to Kronos</p> <p>Parameters:</p> Name Type Description Default <code>iso</code> <code>str</code> <p>isoformat string</p> required <code>tz</code> <code>TimeZones</code> <p>Timezone. Default to UTC</p> <code>None</code> <p>Returns:</p> Type Description <code>Kronos</code> <p>Kronos</p> Source code in <code>Kronos/costructors.py</code> <pre><code>@classmethod\ndef from_isoformat(cls, iso: str, tz:TimeZones=None) -&gt; Kronos:\n    \"\"\"\n    Convert isoformat string to Kronos\n\n    Args:\n        iso (str): isoformat string\n        tz: Timezone. Default to UTC\n\n    Returns:\n        Kronos\n    \"\"\"\n    # if isinstance(tz, str): tz = TimeZones.dict_zones[tz]\n    try:\n        iso = iso.replace('Z', '+00:00') if 'Z' in iso else iso  # necessario perche con python &lt; 3.11 non veniva gestita la Z\n        dt = datetime.fromisoformat(iso)\n        return cls(dt, tz=tz)\n    except:\n        t = time.fromisoformat(iso)\n        return cls(t, tz=tz)\n</code></pre>"},{"location":"Kronos.costructors/#Kronos.costructors.Costructors.from_list_iso","title":"<code>from_list_iso(list_iso, tz=None)</code>  <code>classmethod</code>","text":"<p>convert a list of string with isoformat into a list of Kronos</p> <p>Parameters:</p> Name Type Description Default <code>list_iso</code> <code>list[str]</code> <p>list of isoformat string</p> required <code>tz</code> <code>TimeZones</code> <p>Timezone. Default to UTC</p> <code>None</code> <p>Returns:</p> Type Description <p>list[Kronos]</p> Source code in <code>Kronos/costructors.py</code> <pre><code>@classmethod\ndef from_list_iso(cls, list_iso:List[str], tz:TimeZones=None):\n    \"\"\"\n    convert a list of string with isoformat into a list of Kronos\n\n    Args:\n        list_iso (list[str]): list of isoformat string\n        tz: Timezone. Default to UTC\n\n    Returns:\n        list[Kronos]\n    \"\"\"\n    # if isinstance(tz, str): tz = TimeZones.dict_zones[tz]\n\n    def iso_kronos(iso):\n        return cls.from_iso(iso, tz)\n\n    return list(map(iso_kronos, list_iso))\n</code></pre>"},{"location":"Kronos.costructors/#Kronos.costructors.Costructors.from_list_iso_to_datetime","title":"<code>from_list_iso_to_datetime(list_iso, tz=None)</code>  <code>classmethod</code>","text":"<p>convert a list of string with isoformat into a list of datetime</p> <p>Parameters:</p> Name Type Description Default <code>list_iso</code> <code>list[str]</code> <p>list of isoformat string</p> required <code>tz</code> <code>TimeZones</code> <p>Timezone. Default to UTC</p> <code>None</code> <p>Returns:</p> Type Description <code>List[datetime]</code> <p>list[datetime]</p> Source code in <code>Kronos/costructors.py</code> <pre><code>@classmethod\ndef from_list_iso_to_datetime(cls, list_iso: List[str], tz:TimeZones=None) -&gt; List[datetime]:\n    \"\"\"\n    convert a list of string with isoformat into a list of datetime\n\n    Args:\n        list_iso (list[str]): list of isoformat string\n        tz: Timezone. Default to UTC\n\n    Returns:\n         list[datetime]\n    \"\"\"\n    # if isinstance(tz, str): tz = TimeZones.dict_zones[tz]\n\n    def iso_datetime(iso):\n        return cls.from_iso(iso, tz).dt\n\n    return list(map(iso_datetime, list_iso))\n</code></pre>"},{"location":"Kronos.costructors/#Kronos.costructors.Costructors.from_td","title":"<code>from_td(td)</code>  <code>classmethod</code>","text":"<p>convert a timedelta to Kronos</p> <p>Parameters:</p> Name Type Description Default <code>td</code> <code>timedelta</code> <p>timedelta</p> required <p>Returns:</p> Type Description <code>Kronos</code> <p>Kronos</p> Source code in <code>Kronos/costructors.py</code> <pre><code>@classmethod\ndef from_td(cls, td: [timedelta]) -&gt; Kronos:\n    \"\"\"\n    convert a timedelta to Kronos\n\n    Args:\n        td (timedelta): timedelta\n\n    Returns:\n        Kronos\n    \"\"\"\n    return cls(td=td)\n</code></pre>"},{"location":"Kronos.costructors/#Kronos.costructors.Costructors.from_time","title":"<code>from_time(t, tz=None)</code>  <code>classmethod</code>","text":"<p>convert a timedelta to Kronos</p> <p>Parameters:</p> Name Type Description Default <code>t</code> <code>time</code> <p>valid for time, with and without TimeZone</p> required <code>tz</code> <code>TimeZones</code> <p>Timezone. Default to UTC</p> <code>None</code> <p>Returns:</p> Type Description <code>Kronos</code> <p>Kronos</p> Source code in <code>Kronos/costructors.py</code> <pre><code>@classmethod\ndef from_time(cls, t: [time], tz:TimeZones=None) -&gt; Kronos:\n    \"\"\"\n    convert a timedelta to Kronos\n\n    Args:\n        t (time): valid for time, with and without TimeZone\n        tz: Timezone. Default to UTC\n\n    Returns:\n         Kronos\n    \"\"\"\n    return cls(t, tz=tz)\n</code></pre>"},{"location":"Kronos.costructors/#Kronos.costructors.Costructors.from_timedelta","title":"<code>from_timedelta(td)</code>  <code>classmethod</code>","text":"<p>convert a timedelta to Kronos</p> <p>Parameters:</p> Name Type Description Default <code>td</code> <code>timedelta</code> <p>timedelta</p> required <p>Returns:</p> Type Description <code>Kronos</code> <p>Kronos</p> Source code in <code>Kronos/costructors.py</code> <pre><code>@classmethod\ndef from_timedelta(cls, td: [timedelta]) -&gt; Kronos:\n    \"\"\"\n    convert a timedelta to Kronos\n\n    Args:\n        td (timedelta): timedelta\n\n    Returns:\n        Kronos\n    \"\"\"\n    return cls(td=td)\n</code></pre>"},{"location":"Kronos.costructors/#Kronos.costructors.Costructors.from_timestamp","title":"<code>from_timestamp(timestamp, tz=None)</code>  <code>classmethod</code>","text":"<p>convert a timestamp to Kronos</p> <p>Parameters:</p> Name Type Description Default <code>timestamp</code> <code>int</code> <p>timestamp</p> required <code>tz</code> <code>TimeZones</code> <p>Timezone. Default to UTC</p> <code>None</code> <p>Returns:</p> Type Description <code>Kronos</code> <p>Kronos</p> Source code in <code>Kronos/costructors.py</code> <pre><code>@classmethod\ndef from_timestamp(cls, timestamp:float, tz:TimeZones=None) -&gt; Kronos:\n    \"\"\"\n    convert a timestamp to Kronos\n\n    Args:\n        timestamp (int): timestamp\n        tz: Timezone. Default to UTC\n\n    Returns:\n        Kronos\n    \"\"\"\n    dt = datetime.fromtimestamp(timestamp, tz=TimeZones.utc)\n    tz = TimeZones(dt).zone(tz)\n    if tz is not None: dt = dt.astimezone(tz=tz)\n    return cls(dt)\n</code></pre>"},{"location":"Kronos.costructors/#Kronos.costructors.Costructors.from_ts","title":"<code>from_ts(timestamp, tz=None)</code>  <code>classmethod</code>","text":"<p>convert a timestamp to Kronos</p> <p>Parameters:</p> Name Type Description Default <code>timestamp</code> <code>int</code> <p>timestamp</p> required <code>tz</code> <code>TimeZones</code> <p>Timezone. Default to UTC</p> <code>None</code> <p>Returns:</p> Type Description <code>Kronos</code> <p>Kronos</p> Source code in <code>Kronos/costructors.py</code> <pre><code>@classmethod\ndef from_ts(cls, timestamp:float, tz:TimeZones=None) -&gt; Kronos:\n    \"\"\"\n    convert a timestamp to Kronos\n\n    Args:\n        timestamp (int): timestamp\n        tz: Timezone. Default to UTC\n\n    Returns:\n        Kronos\n    \"\"\"\n    return cls.from_timestamp(timestamp, tz)\n</code></pre>"},{"location":"Kronos.costructors/#Kronos.costructors.Costructors.now","title":"<code>now(tz=None)</code>  <code>classmethod</code>","text":"<p>Produce the Kronos version of the current datetime</p> <p>Parameters:</p> Name Type Description Default <code>tz</code> <code>TimeZones</code> <p>Timezone. Default to UTC</p> <code>None</code> <p>Returns:</p> Type Description <code>Kronos</code> <p>Kronos</p> Source code in <code>Kronos/costructors.py</code> <pre><code>@classmethod\ndef now(cls, tz:TimeZones=None) -&gt; Kronos:\n    \"\"\"\n    Produce the Kronos version of the current datetime\n\n    Args:\n        tz: Timezone. Default to UTC\n\n    Returns:\n        Kronos\n    \"\"\"\n    # if isinstance(tz, str): tz = TimeZones(datetime.now()).dict_zones[tz]\n    return cls(datetime.now(), tz=tz)\n</code></pre>"},{"location":"Kronos.costructors/#Kronos.costructors.Costructors.primetime","title":"<code>primetime(year, month=1, day=1, hour=0, minute=0, second=0, microsecond=0, tz=None)</code>  <code>classmethod</code>","text":"<p>Procude the Kronos element of a specified datetime</p> <p>Parameters:</p> Name Type Description Default <code>year</code> <code>int</code> <p>year</p> required <code>month</code> <code>int</code> <p>month</p> <code>1</code> <code>day</code> <code>int</code> <p>day</p> <code>1</code> <code>hour</code> <code>int</code> <p>hour</p> <code>0</code> <code>minute</code> <code>int</code> <p>minute</p> <code>0</code> <code>second</code> <code>int</code> <p>second</p> <code>0</code> <code>microsecond</code> <code>int</code> <p>microsecond</p> <code>0</code> <code>tz</code> <code>TimeZones</code> <p>Timezone. Default to UTC</p> <code>None</code> <p>Returns:</p> Type Description <code>Kronos</code> <p>Kronos</p> Source code in <code>Kronos/costructors.py</code> <pre><code>@classmethod\ndef primetime(cls, year:int, month:int=1, day:int=1, hour:int=0, minute:int=0, second:int=0, microsecond:int=0, tz:TimeZones=None) -&gt; Kronos:\n    \"\"\"\n    Procude the Kronos element of a specified datetime\n\n    Args:\n        year (int): year\n        month (int): month\n        day (int): day\n        hour (int): hour\n        minute (int): minute\n        second (int): second\n        microsecond (int): microsecond\n        tz: Timezone. Default to UTC\n\n    Returns:\n        Kronos\n    \"\"\"\n    return cls(datetime(year=year, month=month, day=day, hour=hour, minute=minute, second=second,\n                        microsecond=microsecond), tz=tz)\n</code></pre>"},{"location":"Kronos.costructors/#Kronos.costructors.Costructors.today","title":"<code>today(tz=None)</code>  <code>classmethod</code>","text":"<p>Produce the Kronos version of the current day</p> <p>Parameters:</p> Name Type Description Default <code>tz</code> <code>TimeZones</code> <p>Timezone. Default to UTC</p> <code>None</code> <p>Returns:</p> Type Description <code>Kronos</code> <p>Kronos</p> Source code in <code>Kronos/costructors.py</code> <pre><code>@classmethod\ndef today(cls, tz:TimeZones=None) -&gt; Kronos:\n    \"\"\"\n    Produce the Kronos version of the current day\n\n    Args:\n        tz: Timezone. Default to UTC\n\n    Returns:\n        Kronos\n    \"\"\"\n    # if isinstance(tz, str): tz = TimeZones.dict_zones[tz]\n    return cls.now(tz).start_of_day()\n</code></pre>"},{"location":"Kronos.hourglass/","title":"Kronos.hourglass","text":""},{"location":"Kronos.periods/","title":"Kronos.periods","text":""},{"location":"Kronos.periods/#Kronos.periods.Periods","title":"<code>Periods</code>","text":"Source code in <code>Kronos/periods.py</code> <pre><code>class Periods:\n    td = None\n\n    def in_periods(self, period:['seconds', 'minutes', 'hours', 'days', 'weeks', 'months', 'years']='seconds') -&gt; int:\n        \"\"\"\n        convert a time difference into the chosen time period\n\n        Args:\n            period: the approximation required to get the time difference\n\n        Returns:\n            number of time element selected\n        \"\"\"\n        if period in 'seconds':\n            td = int(self.td.total_seconds())\n        elif period in 'minutes':\n            td = int(self.td.total_seconds()/60)\n        elif period in 'hours':\n            td = int(self.td.total_seconds()/(60*60))\n        elif period in 'days':\n            td = int(self.td.total_seconds()/(60*60*24))\n        elif period in 'weeks':\n            td = int(self.td.total_seconds()/(60*60*24*7))\n        elif period in 'months':\n            td = int((self.td.total_seconds()/(60*60*24*7*(52/12))))\n        elif period in 'years':\n            td = int(self.td.total_seconds()/(60*60*24*7*52))\n        else:\n            raise NotImplementedError\n\n        return td\n\n    def in_seconds(self) -&gt; int:\n        \"\"\"\n        convert a time difference into seconds\n\n        Returns:\n            number of seconds\n        \"\"\"\n        return self.in_periods('seconds')\n\n    def in_minutes(self) -&gt; int:\n        \"\"\"\n        convert a time difference into minutes\n\n        Returns:\n            number of minutes\n        \"\"\"\n        return self.in_periods('minutes')\n\n    def in_hours(self) -&gt; int:\n        \"\"\"\n        convert a time difference into hours\n\n        Returns:\n            number of hours\n        \"\"\"\n        return self.in_periods('hours')\n\n    def in_days(self) -&gt; int:\n        \"\"\"\n        convert a time difference into days\n\n        Returns:\n            number of days\n        \"\"\"\n        return self.in_periods('days')\n\n    def in_weeks(self) -&gt; int:\n        \"\"\"\n        convert a time difference into weeks\n\n        Returns:\n            number of weeks\n        \"\"\"\n        return self.in_periods('weeks')\n\n    def in_months(self) -&gt; int:\n        \"\"\"\n        convert a time difference into months\n\n        Returns:\n            number of months\n        \"\"\"\n        return self.in_periods('months')\n\n    def in_years(self) -&gt; int:\n        \"\"\"\n        convert a time difference into years\n\n        Returns:\n            number of years\n        \"\"\"\n        return self.in_periods('years')\n</code></pre>"},{"location":"Kronos.periods/#Kronos.periods.Periods.in_days","title":"<code>in_days()</code>","text":"<p>convert a time difference into days</p> <p>Returns:</p> Type Description <code>int</code> <p>number of days</p> Source code in <code>Kronos/periods.py</code> <pre><code>def in_days(self) -&gt; int:\n    \"\"\"\n    convert a time difference into days\n\n    Returns:\n        number of days\n    \"\"\"\n    return self.in_periods('days')\n</code></pre>"},{"location":"Kronos.periods/#Kronos.periods.Periods.in_hours","title":"<code>in_hours()</code>","text":"<p>convert a time difference into hours</p> <p>Returns:</p> Type Description <code>int</code> <p>number of hours</p> Source code in <code>Kronos/periods.py</code> <pre><code>def in_hours(self) -&gt; int:\n    \"\"\"\n    convert a time difference into hours\n\n    Returns:\n        number of hours\n    \"\"\"\n    return self.in_periods('hours')\n</code></pre>"},{"location":"Kronos.periods/#Kronos.periods.Periods.in_minutes","title":"<code>in_minutes()</code>","text":"<p>convert a time difference into minutes</p> <p>Returns:</p> Type Description <code>int</code> <p>number of minutes</p> Source code in <code>Kronos/periods.py</code> <pre><code>def in_minutes(self) -&gt; int:\n    \"\"\"\n    convert a time difference into minutes\n\n    Returns:\n        number of minutes\n    \"\"\"\n    return self.in_periods('minutes')\n</code></pre>"},{"location":"Kronos.periods/#Kronos.periods.Periods.in_months","title":"<code>in_months()</code>","text":"<p>convert a time difference into months</p> <p>Returns:</p> Type Description <code>int</code> <p>number of months</p> Source code in <code>Kronos/periods.py</code> <pre><code>def in_months(self) -&gt; int:\n    \"\"\"\n    convert a time difference into months\n\n    Returns:\n        number of months\n    \"\"\"\n    return self.in_periods('months')\n</code></pre>"},{"location":"Kronos.periods/#Kronos.periods.Periods.in_periods","title":"<code>in_periods(period='seconds')</code>","text":"<p>convert a time difference into the chosen time period</p> <p>Parameters:</p> Name Type Description Default <code>period</code> <code>[seconds, minutes, hours, days, weeks, months, years]</code> <p>the approximation required to get the time difference</p> <code>'seconds'</code> <p>Returns:</p> Type Description <code>int</code> <p>number of time element selected</p> Source code in <code>Kronos/periods.py</code> <pre><code>def in_periods(self, period:['seconds', 'minutes', 'hours', 'days', 'weeks', 'months', 'years']='seconds') -&gt; int:\n    \"\"\"\n    convert a time difference into the chosen time period\n\n    Args:\n        period: the approximation required to get the time difference\n\n    Returns:\n        number of time element selected\n    \"\"\"\n    if period in 'seconds':\n        td = int(self.td.total_seconds())\n    elif period in 'minutes':\n        td = int(self.td.total_seconds()/60)\n    elif period in 'hours':\n        td = int(self.td.total_seconds()/(60*60))\n    elif period in 'days':\n        td = int(self.td.total_seconds()/(60*60*24))\n    elif period in 'weeks':\n        td = int(self.td.total_seconds()/(60*60*24*7))\n    elif period in 'months':\n        td = int((self.td.total_seconds()/(60*60*24*7*(52/12))))\n    elif period in 'years':\n        td = int(self.td.total_seconds()/(60*60*24*7*52))\n    else:\n        raise NotImplementedError\n\n    return td\n</code></pre>"},{"location":"Kronos.periods/#Kronos.periods.Periods.in_seconds","title":"<code>in_seconds()</code>","text":"<p>convert a time difference into seconds</p> <p>Returns:</p> Type Description <code>int</code> <p>number of seconds</p> Source code in <code>Kronos/periods.py</code> <pre><code>def in_seconds(self) -&gt; int:\n    \"\"\"\n    convert a time difference into seconds\n\n    Returns:\n        number of seconds\n    \"\"\"\n    return self.in_periods('seconds')\n</code></pre>"},{"location":"Kronos.periods/#Kronos.periods.Periods.in_weeks","title":"<code>in_weeks()</code>","text":"<p>convert a time difference into weeks</p> <p>Returns:</p> Type Description <code>int</code> <p>number of weeks</p> Source code in <code>Kronos/periods.py</code> <pre><code>def in_weeks(self) -&gt; int:\n    \"\"\"\n    convert a time difference into weeks\n\n    Returns:\n        number of weeks\n    \"\"\"\n    return self.in_periods('weeks')\n</code></pre>"},{"location":"Kronos.periods/#Kronos.periods.Periods.in_years","title":"<code>in_years()</code>","text":"<p>convert a time difference into years</p> <p>Returns:</p> Type Description <code>int</code> <p>number of years</p> Source code in <code>Kronos/periods.py</code> <pre><code>def in_years(self) -&gt; int:\n    \"\"\"\n    convert a time difference into years\n\n    Returns:\n        number of years\n    \"\"\"\n    return self.in_periods('years')\n</code></pre>"},{"location":"Kronos.sliders/","title":"Kronos.sliders","text":""},{"location":"Kronos.sliders/#Kronos.sliders.sliders","title":"<code>sliders</code>","text":"Source code in <code>Kronos/sliders.py</code> <pre><code>class sliders:\n\n    def __init__(self, dt=None):\n        self.dt = dt\n\n    def start_of(self, period: Literal['minute', 'hour', 'day', 'week', 'month', 'year'] = 'day') -&gt; Kronos:\n        \"\"\"\n        function that set to the start of the selected period\n\n        Args:\n            period: time range to start from\n\n        Returns:\n            Kronos\n        \"\"\"\n        if period in 'minutes':\n            dt = self.dt.replace(second=0, microsecond=0)\n        elif period in 'hours':\n            dt = self.dt.replace(minute=0, second=0, microsecond=0)\n        elif period in 'days':\n            dt = self.dt.replace(hour=0, minute=0, second=0, microsecond=0)\n        elif period in 'weeks':\n            if (self.dt.day - self.dt.weekday()) &lt; 1:\n                month = self.dt.month - 1\n                year = self.dt.year\n                if month &lt; 1:\n                    month = 12\n                    year = self.dt.year - 1\n                day = DAYS_PER_MONTHS[int(_is_leap(year))][month] - (self.dt.weekday() - self.dt.day)\n            else:\n                day = self.dt.day - self.dt.weekday()\n                month = self.dt.month\n                year = self.dt.year\n            dt = self.dt.replace(year=year, month=month, day=day, hour=0, minute=0, second=0, microsecond=0)\n        elif period in 'months':\n            dt = self.dt.replace(day=1, hour=0, minute=0, second=0, microsecond=0)\n        elif period in 'years':\n            dt = self.dt.replace(month=1, day=1, hour=0, minute=0, second=0, microsecond=0)\n        else:\n            raise NotImplementedError\n        return self.__class__(dt)\n\n    def start_of_minute(self) -&gt; Kronos:\n        \"\"\"\n        set to the start of the selected minut\n\n        Returns:\n            Kronos\n        \"\"\"\n        return self.start_of('minute')\n\n    def start_of_hour(self) -&gt; Kronos:\n        \"\"\"\n        set to the start of the selected hour\n\n        Returns:\n            Kronos\n        \"\"\"\n        return self.start_of('hour')\n\n    def start_of_day(self)-&gt; Kronos:\n        \"\"\"\n        set to the start of the selected day\n\n        Returns:\n            Kronos\n        \"\"\"\n        return self.start_of('day')\n\n    def start_of_week(self) -&gt; Kronos:\n        \"\"\"\n        set to the start of the selected week\n\n        Returns:\n            Kronos\n        \"\"\"\n        return self.start_of('week')\n\n    def start_of_month(self) -&gt; Kronos:\n        \"\"\"\n        set to the start of the selected month\n\n        Returns:\n            Kronos\n        \"\"\"\n        return self.start_of('month')\n\n    def start_of_year(self) -&gt; Kronos:\n        \"\"\"\n        set to the start of the selected year\n\n        Returns:\n            Kronos\n        \"\"\"\n        return self.start_of('year')\n\n    def end_of(self, period: Literal['minute', 'hour', 'day', 'week', 'month', 'year'] = 'day') -&gt; Kronos:\n        \"\"\"\n        function that set to the end of the selected period\n\n        Args:\n            period: time range to end from.\n\n        Returns:\n            Kronos\n        \"\"\"\n        if period in 'minutes':\n            dt = self.dt.replace(second=59, microsecond=0)\n        elif period in 'hours':\n            dt = self.dt.replace(minute=59, second=59, microsecond=0)\n        elif period in 'days':\n            dt = self.dt.replace(hour=23, minute=59, second=59, microsecond=0)\n        elif period in 'weeks':\n            delta = 6 - self.dt.weekday()  # trasformo lunedi in 6 e domenica in 0 e poi calcolo qual'\u00e8 il giorno di arrivo con day + delta\n            if (self.dt.day + delta) &gt; DAYS_PER_MONTHS[int(_is_leap(self.dt.year))][self.dt.month]:\n                to_end_month = DAYS_PER_MONTHS[int(_is_leap(self.dt.year))][self.dt.month] - self.dt.day\n                day = delta - to_end_month\n                month = self.dt.month + 1\n                year = self.dt.year\n                if month &gt; 12:\n                    month = 1\n                    year = self.dt.year + 1\n            else:\n                day = self.dt.day + delta\n                month = self.dt.month\n                year = self.dt.year\n            dt = self.dt.replace(year=year, month=month, day=day, hour=23, minute=59, second=59, microsecond=0)\n        elif period in 'months':\n            dt = self.dt.replace(day=DAYS_PER_MONTHS[int(_is_leap(self.dt.year))][self.dt.month], hour=23, minute=59, second=59,\n                                 microsecond=0)\n        elif period in 'years':\n            dt = self.dt.replace(month=12, day=31, hour=23, minute=59, second=59, microsecond=0)\n        else:\n            raise NotImplementedError\n        return self.__class__(dt)\n\n    def end_of_minute(self) -&gt; Kronos:\n        \"\"\"\n        set to the end of the selected minute\n\n        Returns:\n            Kronos\n        \"\"\"\n        return self.end_of('minute')\n\n    def end_of_hour(self) -&gt; Kronos:\n        \"\"\"\n        set to the end of the selected hour\n\n        Returns:\n            Kronos\n        \"\"\"\n        return self.end_of('hour')\n\n    def end_of_day(self) -&gt; Kronos:\n        \"\"\"\n        set to the end of the selected day\n\n        Returns:\n            Kronos\n        \"\"\"\n        return self.end_of('day')\n\n    def end_of_week(self) -&gt; Kronos:\n        \"\"\"\n        set to the end of the selected week\n\n        Returns:\n            Kronos\n        \"\"\"\n        return self.end_of('week')\n\n    def end_of_month(self) -&gt; Kronos:\n        \"\"\"\n        set to the end of the selected month\n\n        Returns:\n            Kronos\n        \"\"\"\n        return self.end_of('month')\n\n    def end_of_year(self) -&gt; Kronos:\n        \"\"\"\n        set to the end of the selected year\n\n        Returns:\n            Kronos\n        \"\"\"\n        return self.end_of('year')\n\n    def add_duration(self,\n                     years:float=0,\n                     months:float=0,\n                     weeks:float=0,\n                     days:float=0,\n                     hours:float=0,\n                     minutes:float=0,\n                     seconds:float=0,\n                     microseconds:float=0) -&gt; Kronos:\n\n        \"\"\"\n        Adds a duration to a kronos instance.\n\n        Args:\n            years: add an ammount of years\n            months: add an ammount of months\n            weeks: add an ammount of weeks\n            days: add an ammount of days\n            hours: add an ammount of hours\n            minutes: add an ammount of minutes\n            seconds: add an ammount of seconds\n            microseconds: add an ammount of microseconds\n\n        Returns:\n            Kronos\n\n        \"\"\"\n        days += weeks * 7\n\n        if (\n                isinstance(self.dt, date)\n                and not isinstance(self.dt, datetime)\n                and any([hours, minutes, seconds, microseconds])\n        ):\n            raise RuntimeError(\"Time elements cannot be added to a date instance.\")\n\n        # Normalizing\n        if abs(microseconds) &gt; 999999:\n            s = _sign(microseconds)\n            div, mod = divmod(microseconds * s, 1000000)\n            microseconds = mod * s\n            seconds += div * s\n\n        if abs(seconds) &gt; 59:\n            s = _sign(seconds)\n            div, mod = divmod(seconds * s, 60)\n            seconds = mod * s\n            minutes += div * s\n\n        if abs(minutes) &gt; 59:\n            s = _sign(minutes)\n            div, mod = divmod(minutes * s, 60)\n            minutes = mod * s\n            hours += div * s\n\n        if abs(hours) &gt; 23:\n            s = _sign(hours)\n            div, mod = divmod(hours * s, 24)\n            hours = mod * s\n            days += div * s\n\n        if abs(months) &gt; 11:\n            s = _sign(months)\n            div, mod = divmod(months * s, 12)\n            months = mod * s\n            years += div * s\n\n        year = self.dt.year + years\n        month = self.dt.month\n\n        if months:\n            month += months\n            if month &gt; 12:\n                year += 1\n                month -= 12\n            elif month &lt; 1:\n                year -= 1\n                month += 12\n\n        day = min(DAYS_PER_MONTHS[int(_is_leap(year))][month], self.dt.day)\n\n        dt = self.dt.replace(year=year, month=month, day=day)\n\n        return self.__class__(dt + timedelta(\n            days=days,\n            hours=hours,\n            minutes=minutes,\n            seconds=seconds,\n            microseconds=microseconds,\n        ))\n\n    def subtract_duration(self,\n                          years:float=0,\n                          months:float=0,\n                          weeks:float=0,\n                          days:float=0,\n                          hours:float=0,\n                          minutes:float=0,\n                          seconds:float=0,\n                          microseconds:float=0) -&gt; Kronos:\n        \"\"\"\n        Subtract a duration to a kronos instance.\n\n        Args:\n            years: Subtract an ammount of years\n            months: Subtract an ammount of months\n            weeks: Subtract an ammount of weeks\n            days: Subtract an ammount of days\n            hours: Subtract an ammount of hours\n            minutes: Subtract an ammount of minutes\n            seconds: Subtract an ammount of seconds\n            microseconds: add an ammount of microseconds\n\n        Returns:\n            Kronos\n        \"\"\"\n        return self.add_duration(years=-years,\n                                 months=-months,\n                                 weeks=-weeks,\n                                 days=-days,\n                                 hours=-hours,\n                                 minutes=-minutes,\n                                 seconds=-seconds,\n                                 microseconds=-microseconds\n                                 )\n\n    def from_interval(self, interval: int, offset: int, scale: Literal['seconds', 'minutes', 'hours', 'days', 'weeks', 'months', 'years'] = 'days'):\n        \"\"\"\n        produce the start and end of a period based on the interval and offset\n\n        Args:\n            interval: interval dimension\n            offset: offset from the data selected\n            scale: scale of the interval\n\n        Returns:\n            Start[Kronos], Stop[Kronos]\n        \"\"\"\n        start = self.subtract_duration(**{scale: interval+offset})\n        stop = self.subtract_duration(**{scale: offset})\n        return start, stop\n</code></pre>"},{"location":"Kronos.sliders/#Kronos.sliders.sliders.add_duration","title":"<code>add_duration(years=0, months=0, weeks=0, days=0, hours=0, minutes=0, seconds=0, microseconds=0)</code>","text":"<p>Adds a duration to a kronos instance.</p> <p>Parameters:</p> Name Type Description Default <code>years</code> <code>float</code> <p>add an ammount of years</p> <code>0</code> <code>months</code> <code>float</code> <p>add an ammount of months</p> <code>0</code> <code>weeks</code> <code>float</code> <p>add an ammount of weeks</p> <code>0</code> <code>days</code> <code>float</code> <p>add an ammount of days</p> <code>0</code> <code>hours</code> <code>float</code> <p>add an ammount of hours</p> <code>0</code> <code>minutes</code> <code>float</code> <p>add an ammount of minutes</p> <code>0</code> <code>seconds</code> <code>float</code> <p>add an ammount of seconds</p> <code>0</code> <code>microseconds</code> <code>float</code> <p>add an ammount of microseconds</p> <code>0</code> <p>Returns:</p> Type Description <code>Kronos</code> <p>Kronos</p> Source code in <code>Kronos/sliders.py</code> <pre><code>def add_duration(self,\n                 years:float=0,\n                 months:float=0,\n                 weeks:float=0,\n                 days:float=0,\n                 hours:float=0,\n                 minutes:float=0,\n                 seconds:float=0,\n                 microseconds:float=0) -&gt; Kronos:\n\n    \"\"\"\n    Adds a duration to a kronos instance.\n\n    Args:\n        years: add an ammount of years\n        months: add an ammount of months\n        weeks: add an ammount of weeks\n        days: add an ammount of days\n        hours: add an ammount of hours\n        minutes: add an ammount of minutes\n        seconds: add an ammount of seconds\n        microseconds: add an ammount of microseconds\n\n    Returns:\n        Kronos\n\n    \"\"\"\n    days += weeks * 7\n\n    if (\n            isinstance(self.dt, date)\n            and not isinstance(self.dt, datetime)\n            and any([hours, minutes, seconds, microseconds])\n    ):\n        raise RuntimeError(\"Time elements cannot be added to a date instance.\")\n\n    # Normalizing\n    if abs(microseconds) &gt; 999999:\n        s = _sign(microseconds)\n        div, mod = divmod(microseconds * s, 1000000)\n        microseconds = mod * s\n        seconds += div * s\n\n    if abs(seconds) &gt; 59:\n        s = _sign(seconds)\n        div, mod = divmod(seconds * s, 60)\n        seconds = mod * s\n        minutes += div * s\n\n    if abs(minutes) &gt; 59:\n        s = _sign(minutes)\n        div, mod = divmod(minutes * s, 60)\n        minutes = mod * s\n        hours += div * s\n\n    if abs(hours) &gt; 23:\n        s = _sign(hours)\n        div, mod = divmod(hours * s, 24)\n        hours = mod * s\n        days += div * s\n\n    if abs(months) &gt; 11:\n        s = _sign(months)\n        div, mod = divmod(months * s, 12)\n        months = mod * s\n        years += div * s\n\n    year = self.dt.year + years\n    month = self.dt.month\n\n    if months:\n        month += months\n        if month &gt; 12:\n            year += 1\n            month -= 12\n        elif month &lt; 1:\n            year -= 1\n            month += 12\n\n    day = min(DAYS_PER_MONTHS[int(_is_leap(year))][month], self.dt.day)\n\n    dt = self.dt.replace(year=year, month=month, day=day)\n\n    return self.__class__(dt + timedelta(\n        days=days,\n        hours=hours,\n        minutes=minutes,\n        seconds=seconds,\n        microseconds=microseconds,\n    ))\n</code></pre>"},{"location":"Kronos.sliders/#Kronos.sliders.sliders.end_of","title":"<code>end_of(period='day')</code>","text":"<p>function that set to the end of the selected period</p> <p>Parameters:</p> Name Type Description Default <code>period</code> <code>Literal['minute', 'hour', 'day', 'week', 'month', 'year']</code> <p>time range to end from.</p> <code>'day'</code> <p>Returns:</p> Type Description <code>Kronos</code> <p>Kronos</p> Source code in <code>Kronos/sliders.py</code> <pre><code>def end_of(self, period: Literal['minute', 'hour', 'day', 'week', 'month', 'year'] = 'day') -&gt; Kronos:\n    \"\"\"\n    function that set to the end of the selected period\n\n    Args:\n        period: time range to end from.\n\n    Returns:\n        Kronos\n    \"\"\"\n    if period in 'minutes':\n        dt = self.dt.replace(second=59, microsecond=0)\n    elif period in 'hours':\n        dt = self.dt.replace(minute=59, second=59, microsecond=0)\n    elif period in 'days':\n        dt = self.dt.replace(hour=23, minute=59, second=59, microsecond=0)\n    elif period in 'weeks':\n        delta = 6 - self.dt.weekday()  # trasformo lunedi in 6 e domenica in 0 e poi calcolo qual'\u00e8 il giorno di arrivo con day + delta\n        if (self.dt.day + delta) &gt; DAYS_PER_MONTHS[int(_is_leap(self.dt.year))][self.dt.month]:\n            to_end_month = DAYS_PER_MONTHS[int(_is_leap(self.dt.year))][self.dt.month] - self.dt.day\n            day = delta - to_end_month\n            month = self.dt.month + 1\n            year = self.dt.year\n            if month &gt; 12:\n                month = 1\n                year = self.dt.year + 1\n        else:\n            day = self.dt.day + delta\n            month = self.dt.month\n            year = self.dt.year\n        dt = self.dt.replace(year=year, month=month, day=day, hour=23, minute=59, second=59, microsecond=0)\n    elif period in 'months':\n        dt = self.dt.replace(day=DAYS_PER_MONTHS[int(_is_leap(self.dt.year))][self.dt.month], hour=23, minute=59, second=59,\n                             microsecond=0)\n    elif period in 'years':\n        dt = self.dt.replace(month=12, day=31, hour=23, minute=59, second=59, microsecond=0)\n    else:\n        raise NotImplementedError\n    return self.__class__(dt)\n</code></pre>"},{"location":"Kronos.sliders/#Kronos.sliders.sliders.end_of_day","title":"<code>end_of_day()</code>","text":"<p>set to the end of the selected day</p> <p>Returns:</p> Type Description <code>Kronos</code> <p>Kronos</p> Source code in <code>Kronos/sliders.py</code> <pre><code>def end_of_day(self) -&gt; Kronos:\n    \"\"\"\n    set to the end of the selected day\n\n    Returns:\n        Kronos\n    \"\"\"\n    return self.end_of('day')\n</code></pre>"},{"location":"Kronos.sliders/#Kronos.sliders.sliders.end_of_hour","title":"<code>end_of_hour()</code>","text":"<p>set to the end of the selected hour</p> <p>Returns:</p> Type Description <code>Kronos</code> <p>Kronos</p> Source code in <code>Kronos/sliders.py</code> <pre><code>def end_of_hour(self) -&gt; Kronos:\n    \"\"\"\n    set to the end of the selected hour\n\n    Returns:\n        Kronos\n    \"\"\"\n    return self.end_of('hour')\n</code></pre>"},{"location":"Kronos.sliders/#Kronos.sliders.sliders.end_of_minute","title":"<code>end_of_minute()</code>","text":"<p>set to the end of the selected minute</p> <p>Returns:</p> Type Description <code>Kronos</code> <p>Kronos</p> Source code in <code>Kronos/sliders.py</code> <pre><code>def end_of_minute(self) -&gt; Kronos:\n    \"\"\"\n    set to the end of the selected minute\n\n    Returns:\n        Kronos\n    \"\"\"\n    return self.end_of('minute')\n</code></pre>"},{"location":"Kronos.sliders/#Kronos.sliders.sliders.end_of_month","title":"<code>end_of_month()</code>","text":"<p>set to the end of the selected month</p> <p>Returns:</p> Type Description <code>Kronos</code> <p>Kronos</p> Source code in <code>Kronos/sliders.py</code> <pre><code>def end_of_month(self) -&gt; Kronos:\n    \"\"\"\n    set to the end of the selected month\n\n    Returns:\n        Kronos\n    \"\"\"\n    return self.end_of('month')\n</code></pre>"},{"location":"Kronos.sliders/#Kronos.sliders.sliders.end_of_week","title":"<code>end_of_week()</code>","text":"<p>set to the end of the selected week</p> <p>Returns:</p> Type Description <code>Kronos</code> <p>Kronos</p> Source code in <code>Kronos/sliders.py</code> <pre><code>def end_of_week(self) -&gt; Kronos:\n    \"\"\"\n    set to the end of the selected week\n\n    Returns:\n        Kronos\n    \"\"\"\n    return self.end_of('week')\n</code></pre>"},{"location":"Kronos.sliders/#Kronos.sliders.sliders.end_of_year","title":"<code>end_of_year()</code>","text":"<p>set to the end of the selected year</p> <p>Returns:</p> Type Description <code>Kronos</code> <p>Kronos</p> Source code in <code>Kronos/sliders.py</code> <pre><code>def end_of_year(self) -&gt; Kronos:\n    \"\"\"\n    set to the end of the selected year\n\n    Returns:\n        Kronos\n    \"\"\"\n    return self.end_of('year')\n</code></pre>"},{"location":"Kronos.sliders/#Kronos.sliders.sliders.from_interval","title":"<code>from_interval(interval, offset, scale='days')</code>","text":"<p>produce the start and end of a period based on the interval and offset</p> <p>Parameters:</p> Name Type Description Default <code>interval</code> <code>int</code> <p>interval dimension</p> required <code>offset</code> <code>int</code> <p>offset from the data selected</p> required <code>scale</code> <code>Literal['seconds', 'minutes', 'hours', 'days', 'weeks', 'months', 'years']</code> <p>scale of the interval</p> <code>'days'</code> <p>Returns:</p> Type Description <p>Start[Kronos], Stop[Kronos]</p> Source code in <code>Kronos/sliders.py</code> <pre><code>def from_interval(self, interval: int, offset: int, scale: Literal['seconds', 'minutes', 'hours', 'days', 'weeks', 'months', 'years'] = 'days'):\n    \"\"\"\n    produce the start and end of a period based on the interval and offset\n\n    Args:\n        interval: interval dimension\n        offset: offset from the data selected\n        scale: scale of the interval\n\n    Returns:\n        Start[Kronos], Stop[Kronos]\n    \"\"\"\n    start = self.subtract_duration(**{scale: interval+offset})\n    stop = self.subtract_duration(**{scale: offset})\n    return start, stop\n</code></pre>"},{"location":"Kronos.sliders/#Kronos.sliders.sliders.start_of","title":"<code>start_of(period='day')</code>","text":"<p>function that set to the start of the selected period</p> <p>Parameters:</p> Name Type Description Default <code>period</code> <code>Literal['minute', 'hour', 'day', 'week', 'month', 'year']</code> <p>time range to start from</p> <code>'day'</code> <p>Returns:</p> Type Description <code>Kronos</code> <p>Kronos</p> Source code in <code>Kronos/sliders.py</code> <pre><code>def start_of(self, period: Literal['minute', 'hour', 'day', 'week', 'month', 'year'] = 'day') -&gt; Kronos:\n    \"\"\"\n    function that set to the start of the selected period\n\n    Args:\n        period: time range to start from\n\n    Returns:\n        Kronos\n    \"\"\"\n    if period in 'minutes':\n        dt = self.dt.replace(second=0, microsecond=0)\n    elif period in 'hours':\n        dt = self.dt.replace(minute=0, second=0, microsecond=0)\n    elif period in 'days':\n        dt = self.dt.replace(hour=0, minute=0, second=0, microsecond=0)\n    elif period in 'weeks':\n        if (self.dt.day - self.dt.weekday()) &lt; 1:\n            month = self.dt.month - 1\n            year = self.dt.year\n            if month &lt; 1:\n                month = 12\n                year = self.dt.year - 1\n            day = DAYS_PER_MONTHS[int(_is_leap(year))][month] - (self.dt.weekday() - self.dt.day)\n        else:\n            day = self.dt.day - self.dt.weekday()\n            month = self.dt.month\n            year = self.dt.year\n        dt = self.dt.replace(year=year, month=month, day=day, hour=0, minute=0, second=0, microsecond=0)\n    elif period in 'months':\n        dt = self.dt.replace(day=1, hour=0, minute=0, second=0, microsecond=0)\n    elif period in 'years':\n        dt = self.dt.replace(month=1, day=1, hour=0, minute=0, second=0, microsecond=0)\n    else:\n        raise NotImplementedError\n    return self.__class__(dt)\n</code></pre>"},{"location":"Kronos.sliders/#Kronos.sliders.sliders.start_of_day","title":"<code>start_of_day()</code>","text":"<p>set to the start of the selected day</p> <p>Returns:</p> Type Description <code>Kronos</code> <p>Kronos</p> Source code in <code>Kronos/sliders.py</code> <pre><code>def start_of_day(self)-&gt; Kronos:\n    \"\"\"\n    set to the start of the selected day\n\n    Returns:\n        Kronos\n    \"\"\"\n    return self.start_of('day')\n</code></pre>"},{"location":"Kronos.sliders/#Kronos.sliders.sliders.start_of_hour","title":"<code>start_of_hour()</code>","text":"<p>set to the start of the selected hour</p> <p>Returns:</p> Type Description <code>Kronos</code> <p>Kronos</p> Source code in <code>Kronos/sliders.py</code> <pre><code>def start_of_hour(self) -&gt; Kronos:\n    \"\"\"\n    set to the start of the selected hour\n\n    Returns:\n        Kronos\n    \"\"\"\n    return self.start_of('hour')\n</code></pre>"},{"location":"Kronos.sliders/#Kronos.sliders.sliders.start_of_minute","title":"<code>start_of_minute()</code>","text":"<p>set to the start of the selected minut</p> <p>Returns:</p> Type Description <code>Kronos</code> <p>Kronos</p> Source code in <code>Kronos/sliders.py</code> <pre><code>def start_of_minute(self) -&gt; Kronos:\n    \"\"\"\n    set to the start of the selected minut\n\n    Returns:\n        Kronos\n    \"\"\"\n    return self.start_of('minute')\n</code></pre>"},{"location":"Kronos.sliders/#Kronos.sliders.sliders.start_of_month","title":"<code>start_of_month()</code>","text":"<p>set to the start of the selected month</p> <p>Returns:</p> Type Description <code>Kronos</code> <p>Kronos</p> Source code in <code>Kronos/sliders.py</code> <pre><code>def start_of_month(self) -&gt; Kronos:\n    \"\"\"\n    set to the start of the selected month\n\n    Returns:\n        Kronos\n    \"\"\"\n    return self.start_of('month')\n</code></pre>"},{"location":"Kronos.sliders/#Kronos.sliders.sliders.start_of_week","title":"<code>start_of_week()</code>","text":"<p>set to the start of the selected week</p> <p>Returns:</p> Type Description <code>Kronos</code> <p>Kronos</p> Source code in <code>Kronos/sliders.py</code> <pre><code>def start_of_week(self) -&gt; Kronos:\n    \"\"\"\n    set to the start of the selected week\n\n    Returns:\n        Kronos\n    \"\"\"\n    return self.start_of('week')\n</code></pre>"},{"location":"Kronos.sliders/#Kronos.sliders.sliders.start_of_year","title":"<code>start_of_year()</code>","text":"<p>set to the start of the selected year</p> <p>Returns:</p> Type Description <code>Kronos</code> <p>Kronos</p> Source code in <code>Kronos/sliders.py</code> <pre><code>def start_of_year(self) -&gt; Kronos:\n    \"\"\"\n    set to the start of the selected year\n\n    Returns:\n        Kronos\n    \"\"\"\n    return self.start_of('year')\n</code></pre>"},{"location":"Kronos.sliders/#Kronos.sliders.sliders.subtract_duration","title":"<code>subtract_duration(years=0, months=0, weeks=0, days=0, hours=0, minutes=0, seconds=0, microseconds=0)</code>","text":"<p>Subtract a duration to a kronos instance.</p> <p>Parameters:</p> Name Type Description Default <code>years</code> <code>float</code> <p>Subtract an ammount of years</p> <code>0</code> <code>months</code> <code>float</code> <p>Subtract an ammount of months</p> <code>0</code> <code>weeks</code> <code>float</code> <p>Subtract an ammount of weeks</p> <code>0</code> <code>days</code> <code>float</code> <p>Subtract an ammount of days</p> <code>0</code> <code>hours</code> <code>float</code> <p>Subtract an ammount of hours</p> <code>0</code> <code>minutes</code> <code>float</code> <p>Subtract an ammount of minutes</p> <code>0</code> <code>seconds</code> <code>float</code> <p>Subtract an ammount of seconds</p> <code>0</code> <code>microseconds</code> <code>float</code> <p>add an ammount of microseconds</p> <code>0</code> <p>Returns:</p> Type Description <code>Kronos</code> <p>Kronos</p> Source code in <code>Kronos/sliders.py</code> <pre><code>def subtract_duration(self,\n                      years:float=0,\n                      months:float=0,\n                      weeks:float=0,\n                      days:float=0,\n                      hours:float=0,\n                      minutes:float=0,\n                      seconds:float=0,\n                      microseconds:float=0) -&gt; Kronos:\n    \"\"\"\n    Subtract a duration to a kronos instance.\n\n    Args:\n        years: Subtract an ammount of years\n        months: Subtract an ammount of months\n        weeks: Subtract an ammount of weeks\n        days: Subtract an ammount of days\n        hours: Subtract an ammount of hours\n        minutes: Subtract an ammount of minutes\n        seconds: Subtract an ammount of seconds\n        microseconds: add an ammount of microseconds\n\n    Returns:\n        Kronos\n    \"\"\"\n    return self.add_duration(years=-years,\n                             months=-months,\n                             weeks=-weeks,\n                             days=-days,\n                             hours=-hours,\n                             minutes=-minutes,\n                             seconds=-seconds,\n                             microseconds=-microseconds\n                             )\n</code></pre>"},{"location":"Kronos.timezones/","title":"Kronos.timezones","text":""},{"location":"Kronos.timezones/#Kronos.timezones.TimeZones","title":"<code>TimeZones</code>","text":"Source code in <code>Kronos/timezones.py</code> <pre><code>class TimeZones:\n    utc = timezone.utc\n\n    rome = timezone(timedelta(hours=1))  # time zone invernale o solare\n    rome_legal = timezone(timedelta(hours=2))  # timezone estiva o legale\n\n    london = timezone(timedelta(hours=0))  # time zone invernale o solare\n    london_legal = timezone(timedelta(hours=1))  # timezone estiva o legale\n\n    tz00 = timezone(timedelta(hours=0))\n\n    tz01 = timezone(timedelta(hours=1))\n    tz02 = timezone(timedelta(hours=2))\n    tz03 = timezone(timedelta(hours=3))\n    tz04 = timezone(timedelta(hours=4))\n    tz05 = timezone(timedelta(hours=5))\n    tz06 = timezone(timedelta(hours=6))\n    tz07 = timezone(timedelta(hours=7))\n    tz08 = timezone(timedelta(hours=8))\n    tz09 = timezone(timedelta(hours=9))\n    tz10 = timezone(timedelta(hours=10))\n    tz11 = timezone(timedelta(hours=11))\n    tz12 = timezone(timedelta(hours=12))\n    tz13 = timezone(timedelta(hours=13))\n    tz14 = timezone(timedelta(hours=14))\n\n    tzm01 = timezone(timedelta(hours=-1))\n    tzm02 = timezone(timedelta(hours=-2))\n    tzm03 = timezone(timedelta(hours=-3))\n    tzm04 = timezone(timedelta(hours=-4))\n    tzm05 = timezone(timedelta(hours=-5))\n    tzm06 = timezone(timedelta(hours=-6))\n    tzm07 = timezone(timedelta(hours=-7))\n    tzm08 = timezone(timedelta(hours=-8))\n    tzm09 = timezone(timedelta(hours=-9))\n    tzm10 = timezone(timedelta(hours=-10))\n    tzm11 = timezone(timedelta(hours=-11))\n\n    # +2 tra le 2:00 del mattino dell'ultima domenica di marzo e le 3:00 del mattino dell'ultima domenica di ottobre\n    # +1 le 3:00 del mattino dell'ultima domenica di ottobre e le 2:00 del mattino dell'ultima domenica di marzo\n    dict_zones = {'utc': utc,\n                  'rome': rome, 'it': rome, 'IT': rome,\n                  'london': london, 'uk': london, 'UK': london,\n                  '+00': tz00, '+01': tz01, '+02': tz02, '+03': tz03, '+04': tz04, '+05': tz05, '+06': tz06, '+07': tz07,\n                  '+08': tz08, '+09': tz09, '+10': tz10, '+11': tz11, '+12': tz12, '+13': tz13, '+14': tz14,\n                  '-00': tz00, '-01': tzm01, '-02': tzm02, '-03': tzm03, '-04': tzm04, '-05': tzm05, '-06': tzm06, '-07': tzm07,\n                  '-08': tzm08, '-09': tzm09, '-10': tzm10, '-11': tzm11,}\n\n    def __init__(self, now: datetime = datetime.now()):\n        self.now = now\n        # self.reset()\n        self._rome(now)\n        self._london(now)\n\n    # def reset(self):\n    #     self.rome = timezone(timedelta(hours=1))  # time zone invernale o solare\n    #     self.rome_legal = timezone(timedelta(hours=2))  # timezone estiva o legale\n\n    def zone(self, tz:str=None) -&gt; timezone:\n        \"\"\"\n            Restituisce un oggetto timezone basato sulla stringa fornita o sull'orario UTC di default.\n\n            Questo metodo verifica se la stringa fornita rappresenta una zona valida e la converte in un oggetto timezone.\n            Se la stringa non \u00e8 valida, viene sollevato un ValueError.\n\n            Args:\n                tz (str, optional): Una stringa che rappresenta la zona oraria desiderata. Pu\u00f2 essere uno dei seguenti:\n                    - Chiavi definite in `dict_zones` (es. 'rome', 'it', 'UK')\n                    - Stringhe rappresentanti fusi orari supportati da `pytz` (es. 'Europe/Rome', 'America/New_York')\n                    Se `tz` \u00e8 None, viene restituito il fuso orario UTC.\n\n            Returns:\n                timezone: Un oggetto timezone che rappresenta la zona oraria specificata.\n\n            Raises:\n                ValueError: Se la stringa fornita non rappresenta una zona oraria valida.\n\n            Esempi:\n                &gt;&gt; tz = TimeZones()\n                &gt;&gt; tz.zone('rome')\n                datetime.timezone(datetime.timedelta(seconds=3600))\n\n                &gt;&gt; tz.zone('Europe/Rome')\n                &lt;DstTzInfo 'Europe/Rome' CET+1:00:00 STD&gt;\n\n                &gt;&gt; tz.zone('Invalid/Timezone')\n                ValueError: Invalid/Timezone is not a valid timezone\n        \"\"\"\n\n        # if tz is None it use the UTC timezone\n        if tz is None:\n            tz = self.dict_zones['utc']\n\n        # if tz is a string compatible with pytz timezones use that one\n        elif isinstance(tz, str) and tz not in self.dict_zones:\n            if tz in pytz.all_timezones:\n                tz = pytz.timezone(tz)  # finds the timezone\n                tz = tz.localize(self.now).tzinfo  # convert the timezone with the propre GMT based on the actual time\n            else:\n                raise ValueError(f'{tz} is not a valid timezone')\n\n        elif isinstance(tz, pytz.tzinfo.BaseTzInfo):  # se la tz passata \u00e8 stata generata con pytz, puo essere usata\n            tz = tz.localize(self.now).tzinfo\n\n        # if the string is in the dict_zones use that one\n        elif isinstance(tz, str) and tz in self.dict_zones:\n            tz = self.dict_zones[tz]\n\n        elif isinstance(tz, timezone):\n            pass\n\n        else:\n            raise ValueError(f'{tz} is not a valid timezone')\n\n        return tz\n\n    def _rome(self, now):\n        weekday_last_day_of_march = datetime(year=now.year, month=3, day=31).weekday()\n        last_sun_of_march = datetime(year=now.year, month=3, day=31 - (weekday_last_day_of_march + 1), hour=2)\n\n        weekday_last_day_of_oct = datetime(year=now.year, month=10, day=31).weekday()\n        last_sun_of_oct = datetime(year=now.year, month=10, day=31 - (weekday_last_day_of_oct + 1), hour=3)\n\n        is_legal = last_sun_of_march &lt; now &lt; last_sun_of_oct\n        # print(f'is_legal {is_legal}')\n        if is_legal:\n            self.rome = self.rome_legal\n            self.dict_zones['rome'] = self.rome_legal\n            self.dict_zones['it'] = self.rome_legal\n            self.dict_zones['IT'] = self.rome_legal\n            # print(f'rome_legal {self.rome_legal}')\n        else:\n            self.dict_zones['rome'] = self.rome\n            self.dict_zones['it'] = self.rome\n            self.dict_zones['IT'] = self.rome\n            # print(f'rome_legal {self.rome_legal}')\n\n    def _london(self, now):\n        weekday_last_day_of_march = datetime(year=now.year, month=3, day=31).weekday()\n        last_sun_of_march = datetime(year=now.year, month=3, day=31 - (weekday_last_day_of_march + 1), hour=2)\n\n        weekday_last_day_of_oct = datetime(year=now.year, month=10, day=31).weekday()\n        last_sun_of_oct = datetime(year=now.year, month=10, day=31 - (weekday_last_day_of_oct + 1), hour=3)\n\n        is_legal = last_sun_of_march &lt; now &lt; last_sun_of_oct\n        if is_legal:\n            self.london = self.london_legal\n            self.dict_zones['london'] = self.london_legal\n            self.dict_zones['uk'] = self.london_legal\n            self.dict_zones['UK'] = self.london_legal\n        else:\n            self.dict_zones['london'] = self.london\n            self.dict_zones['uk'] = self.london\n            self.dict_zones['UK'] = self.london\n</code></pre>"},{"location":"Kronos.timezones/#Kronos.timezones.TimeZones.zone","title":"<code>zone(tz=None)</code>","text":"<p>Restituisce un oggetto timezone basato sulla stringa fornita o sull'orario UTC di default.</p> <p>Questo metodo verifica se la stringa fornita rappresenta una zona valida e la converte in un oggetto timezone. Se la stringa non \u00e8 valida, viene sollevato un ValueError.</p> <p>Parameters:</p> Name Type Description Default <code>tz</code> <code>str</code> <p>Una stringa che rappresenta la zona oraria desiderata. Pu\u00f2 essere uno dei seguenti: - Chiavi definite in <code>dict_zones</code> (es. 'rome', 'it', 'UK') - Stringhe rappresentanti fusi orari supportati da <code>pytz</code> (es. 'Europe/Rome', 'America/New_York') Se <code>tz</code> \u00e8 None, viene restituito il fuso orario UTC.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>timezone</code> <code>timezone</code> <p>Un oggetto timezone che rappresenta la zona oraria specificata.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>Se la stringa fornita non rappresenta una zona oraria valida.</p> Esempi <p>tz = TimeZones() tz.zone('rome') datetime.timezone(datetime.timedelta(seconds=3600))</p> <p>tz.zone('Europe/Rome')  <p>tz.zone('Invalid/Timezone') ValueError: Invalid/Timezone is not a valid timezone</p> Source code in <code>Kronos/timezones.py</code> <pre><code>def zone(self, tz:str=None) -&gt; timezone:\n    \"\"\"\n        Restituisce un oggetto timezone basato sulla stringa fornita o sull'orario UTC di default.\n\n        Questo metodo verifica se la stringa fornita rappresenta una zona valida e la converte in un oggetto timezone.\n        Se la stringa non \u00e8 valida, viene sollevato un ValueError.\n\n        Args:\n            tz (str, optional): Una stringa che rappresenta la zona oraria desiderata. Pu\u00f2 essere uno dei seguenti:\n                - Chiavi definite in `dict_zones` (es. 'rome', 'it', 'UK')\n                - Stringhe rappresentanti fusi orari supportati da `pytz` (es. 'Europe/Rome', 'America/New_York')\n                Se `tz` \u00e8 None, viene restituito il fuso orario UTC.\n\n        Returns:\n            timezone: Un oggetto timezone che rappresenta la zona oraria specificata.\n\n        Raises:\n            ValueError: Se la stringa fornita non rappresenta una zona oraria valida.\n\n        Esempi:\n            &gt;&gt; tz = TimeZones()\n            &gt;&gt; tz.zone('rome')\n            datetime.timezone(datetime.timedelta(seconds=3600))\n\n            &gt;&gt; tz.zone('Europe/Rome')\n            &lt;DstTzInfo 'Europe/Rome' CET+1:00:00 STD&gt;\n\n            &gt;&gt; tz.zone('Invalid/Timezone')\n            ValueError: Invalid/Timezone is not a valid timezone\n    \"\"\"\n\n    # if tz is None it use the UTC timezone\n    if tz is None:\n        tz = self.dict_zones['utc']\n\n    # if tz is a string compatible with pytz timezones use that one\n    elif isinstance(tz, str) and tz not in self.dict_zones:\n        if tz in pytz.all_timezones:\n            tz = pytz.timezone(tz)  # finds the timezone\n            tz = tz.localize(self.now).tzinfo  # convert the timezone with the propre GMT based on the actual time\n        else:\n            raise ValueError(f'{tz} is not a valid timezone')\n\n    elif isinstance(tz, pytz.tzinfo.BaseTzInfo):  # se la tz passata \u00e8 stata generata con pytz, puo essere usata\n        tz = tz.localize(self.now).tzinfo\n\n    # if the string is in the dict_zones use that one\n    elif isinstance(tz, str) and tz in self.dict_zones:\n        tz = self.dict_zones[tz]\n\n    elif isinstance(tz, timezone):\n        pass\n\n    else:\n        raise ValueError(f'{tz} is not a valid timezone')\n\n    return tz\n</code></pre>"},{"location":"Kronos.version/","title":"Kronos.version","text":""},{"location":"installation/","title":"Installazione","text":"<p>Il pacchetto si installa come un qualsiasi pacchetto python <pre><code>pip install xautomata-kronos\n</code></pre></p> <p>L'uso interno poi deve essere fatto con il solo nome Kronos <pre><code>import Kronos\n</code></pre></p>"},{"location":"user_guide/","title":"Kronos","text":"<p>Classe per la gestione dei timestamp in modo chiaro e univoco. La classe forza l'uso delle timezone indipendentemente da come si crea l'oggetto temporale.</p> <p>Kronos \u00e8 basata sulla libreria standard di python datetime e su pytz.</p> <p>Un oggetto Kronos \u00e8 interamente compatibile con un oggetto datetime (che sia datetime.datetime, datetime.date, datetime.time). Possono essere fatte operazioni incociate Kronos con datetime o isoformat. In ogni situazione Kronos convertira l'oggetto non Kronos per poi usarlo, aggiungendo quindi la timezone se manca.</p>"},{"location":"user_guide/#utilizzo","title":"utilizzo","text":""},{"location":"user_guide/#datetime-date-time","title":"datetime / date / time","text":""},{"location":"user_guide/#creazione","title":"creazione","text":"<p>il metodo primetime permette di creare un elemento temporale Kronos <pre><code>import Kronos\nKronos.primetime(year=2023, month=4)\n&gt;&gt; 2023-04-01 00:00:00+00:00\n</code></pre> primetime ha come campo obligatorio l'anno, i restanti valori vengono messi all'inizio del range temporale non assegnato. Se non definita, di default viene impostata la timezone di UTC.</p> <p><code>Kronos.now()</code> e <code>Kronos.today()</code> restituiscono l'oggetto Kronos rispettivamente con il momento corrente o  il giorno corrente (la funzione <code>Kronos.today()</code> restituisce anche le ore e la timezone, semplicemente restituisce la data con l'ora fissata all'inizio del giorno). Questo e' valido per ogni elemento che non sia un datetime, le date e i time vengono trasformati in datetime con timezone.</p>"},{"location":"user_guide/#conversione","title":"conversione","text":"<p>E' possibile passare da datetime a Kronos e viceversa con semplici passaggi <pre><code>import Kronos\nfrom datetime import datetime\nnow_k = Kronos.from_datetime(datetime.now())  # da datetime a kronos\nnow_dt = Kronos.now().datetime()  # da Kronos a datetime con funzione di estrazione\n</code></pre></p> <p>E' altrettanto semplice caricare convertire un isoformat in un oggetto kronos <code>Kronos.from_iso('2023-01-01T00:00:00')</code>.</p> <p>Un elemento Kronos \u00e8 poi facilmente convertibile in un formato isoformat in piu di una maniera: <pre><code>import Kronos\nnow_iso1 = Kronos.now().iso()  # da Kronos a isoformat\nnow_iso2 = Kronos.now().isoformat()  # da Kronos a isoformat (identica alla precedente)\nnow_iso3 = Kronos.now().datetime().isoformat()  # da Kronos a datetime a isoformat()\n</code></pre></p> <p>In tutte queste situazioni, se la time zone \u00e8 assente, viene sempre automaticamente aggiunta e quella di default e' UTC.</p> <p>Se si carica un elemento date questo verra convertito in un datetime e abbianto ad una timezone. Analogamente se si carica un elemento time questo verra convertito in datetime abbinando sempre la stessa data di 2000-10-10  e in mancanza ti timezone verra assegnata pure quella, come si vede nel seguente esempio:</p> <pre><code>import Kronos\nKronos.from_iso(\"12:00:00\")  # da time in isoformat a kronos\n&gt;&gt; 2000-10-10 12:00:00+00:00\n</code></pre>"},{"location":"user_guide/#costruttori","title":"costruttori","text":"<ul> <li>now</li> <li>today</li> <li>primetime</li> <li>from_isoformat</li> <li>from_iso</li> <li>from_timestamp</li> <li>from_ts</li> <li>from_datetime</li> <li>from_date</li> <li>from_dt (aka from_datetime)</li> <li>from_format</li> <li>from_list_iso_to_datetime</li> <li>from_list_iso</li> <li>from_timedelta</li> <li>from_td (aka from_timedelta)</li> <li>from_time</li> </ul>"},{"location":"user_guide/#funzioni","title":"funzioni","text":"<p>Esistono una serie di operazioni applicabili agli oggetti Kronos: - start_of - end_of - add_duration - subtract_duration - ==, &gt;, &gt;=, &lt;, &lt;=, - - date, datetime, isoformat, iso, timestamp, ts, time</p> <p>Le operazioni ==, &gt;, &gt;=, &lt;, &lt;=, - permettono di confrontare date cross classi, permettendo di comparare stringhe in isoformat e datetime con Kronos, di seguito un esempio. <pre><code>import Kronos\nfrom datetime import date, datetime\nKronos.now() &gt; Kronos.from_iso(\"2022-01-01\")  # Kronos con Kronos\n&gt;&gt;&gt; True\nKronos.now() &gt; datetime.fromisoformat(\"2022-01-01\")  # Kronos con datetime\n&gt;&gt;&gt; True\nKronos.now() &gt; date.fromisoformat(\"2022-01-01\")  # Kronos con date\n&gt;&gt;&gt; True\nKronos.now() &gt; \"2022-01-01\"  # Kronos con stringa\n&gt;&gt;&gt; True\n</code></pre></p>"},{"location":"user_guide/#start_of-end_of","title":"start_of, end_of","text":"<p>Permettono di muovere il cursore temporale all'inizio o alla fine di una finestra scelta. E' possibile sceglire di trasformare una data nell'inizio della giornata o nella fine della settimana, rispetto alla data selezionata. <pre><code>import Kronos\nday = Kronos.now().start_of_day()  # ottengo l'inizio della giornata\nmonth = Kronos.now().end_of_month()  # ottengo la fine del mese\n</code></pre> I range temporale tra cui scegliere sono: - minute - hour - day - week - month - year</p>"},{"location":"user_guide/#add-and-subtract-duration","title":"add and subtract duration","text":"<p>Permette di aggiungere o togliere un certo ammontare di range temporale dalla data scelta. <pre><code>import Kronos\ndate = Kronos.from_iso('2023-01-01T00:00:00')  # converto un isoformat a Kronos\ndate.add_duration(days=3, minutes=7)  # aggiungo 3 giorni e 7 minuti\n&gt;&gt; 2023-01-03 00:07:00+00:00\ndate.subtract_duration(years=1)  # tolgo 1 anno\n&gt;&gt; 2022-01-01 00:00:00+00:00\n</code></pre></p>"},{"location":"user_guide/#concatenazione","title":"concatenazione","text":"<p>Tutte le operazioni applicabili su un elemento Kronos sono concatenabili <pre><code>import Kronos\ndate = Kronos.today().start_of_month().end_of_day().add_duration(hours=1)\n</code></pre> Nell'esempio qui sopra viene presa la gioranta in formato date, viene preso l'inizio del mese e da li ci si sposta alla fine della giornata poi si aggiunge un ora.</p>"},{"location":"user_guide/#intervallo-temporale","title":"intervallo temporale","text":"<p>esiste un metodo leggermente differente, che dato un Kronos, un intervallo tempora e un offset restituisce gli estremi del range temporale richiesto. <pre><code>import Kronos\nstart, stop = Kronos.from_iso('2023-01-01T00:00:00').from_interval(10, 10, 'days')\n&gt;&gt; 2022-12-11 00:00:00, 2022-12-21 00:00:00\n</code></pre></p>"},{"location":"user_guide/#differenze-temporali","title":"differenze temporali","text":"<p>Gli elementi Kronos supportano operazione di somma e sottrazione, ma a differenza di datetime, un operazione matematica tra due elementi kronos produce sempre un elemento kronos. La ragione di questa scelta \u00e8 legata al minimizzare gli import per fare operazioni su oggetti temporali. Chiaramente una volta che un oggetto Kronos ha subito una operazione di questo genere non potra piu supportare i metodi indicati sopra. Nonostante cio' supporta metodi analoghi a quelli di timedelta e si comportano in modo similare agli altri metodi di Kronos.</p>"},{"location":"user_guide/#-","title":"+/-","text":"<p>Le operazioni supportate sono somme e sottrazioni <pre><code>import Kronos\nnow = Kronos.now()\nyesterday = now.subtract_duration(days=1)\ndiff = now - yesterday\n&gt;&gt; 1 days\n</code></pre> Sottraendo due elementi Kronos si ottiene un oggetto differenza analogo in tutto e per tutto a un timedelta</p>"},{"location":"user_guide/#conversione_1","title":"conversione","text":"<p>E' possibile passare da timedelta a Kronos e viceversa con semplici passatti <pre><code>import Kronos\nfrom datetime import timedelta\nnow_k = Kronos.from_timedelta(td=timedelta(days=1))  # da timedelta a kronos\nnow_td = (Kronos.now() - Kronos.now().subtract_duration(days=1)).timedelta()  # da Kronos a timedelta\n</code></pre></p>"},{"location":"user_guide/#approssimazione","title":"approssimazione","text":"<p>gli oggetti Kronos di differenze temporali possono essere trasformati in numeri interi rappresentati l'approssimazione piu vicina al range temporale chiesto tramite il metodo <code>in_periods</code>. <pre><code>import Kronos\nnow = Kronos.now()\nyesterday = now.subtract_duration(days=1)\ndiff = now - yesterday\ndiff.in_days()\n&gt;&gt; 1\n</code></pre></p>"},{"location":"user_guide/#timezones","title":"Timezones","text":"<p>Kronos possiede una libreria interna per la gestione delle Timezones. La Timezone impostata di Default e' quella UTC, ma ogni volta che si crea un oggetto Kronos e' sempre possibile aggiungere l'argomento tz per impostare una timezone diversa.</p> <pre><code>import Kronos\nKronos.now('rome')\nKronos.primetime(2023, tz='rome')\n</code></pre> <p>Se l'elemento che si sta convertendo in Kronos gia possiede una timezone, quella impostata in aggiunta non verra usata. Kronos si assicura che ogni suo elemento abbia una timezone, ma non si impone l'addove sia gia presente.</p>"},{"location":"user_guide/#timezone-adattiva","title":"Timezone adattiva","text":"<p>Sono presenti alcune nazioni di cui viene considerata la timezone rispetto al momento dell'anno modificandola in base all'ora solare o legale.</p> <pre><code>import Kronos\nKronos.primetime(2023, 12, 1, 0, 0, 0, 0, 'rome')\n&gt;&gt; 2023-12-01 00:00:00+01:00\nKronos.primetime(2023, 8, 1, 0, 0, 0, 0, 'rome')\n&gt;&gt; 2023-08-01 00:00:00+02:00\n</code></pre> <p>Al momento sono presenti: - 'rome' (aka 'it' o 'IT') - 'london' (aka 'uk' o 'UK')</p>"},{"location":"user_guide/#timezone-compatibile","title":"Timezone compatibile","text":"<p>In qualsiasi campo venga richiesta una timezone, puo essere inserito una qualsiasi oggetto time zone compatibile. Possono essere usate direttamente le stringhe dello IANA time zone database, senza dover caricare la libreria pytz. <pre><code>import Kronos\nfrom datetime import date, datetime, timedelta, time, timezone\nfrom pytz import timezone as tz\nKronos.now(tz=timezone(timedelta(hours=1)))\n&gt;&gt; 2024-07-24 13:35:26.653931+01:00\nKronos.now(tz=tz('US/Eastern'))\n&gt;&gt; 2024-07-24 13:35:26.711635-04:56\nKronos.now(tz='US/Eastern')\n&gt;&gt; 2024-07-24 13:35:26.711635-04:56\n</code></pre></p>"},{"location":"user_guide/#timezone-generica","title":"Timezone generica","text":"<p>Le timezone intere sono gia codificate e sono richiamabili con semplici stringhe nel campo tz <pre><code>import Kronos\nKronos.now(tz='+01')\n&gt;&gt; 2024-07-24 13:38:12.291010+01:00\nKronos.now(tz='-06')\n&gt;&gt; 2024-07-24 13:38:12.292010-06:00\n</code></pre></p>"},{"location":"user_guide/#note-utili","title":"Note utili","text":"<p>Offsets in Resample <pre><code>Alias   Description\n\nB       business day frequency\nC       custom business day frequency\nD       calendar day frequency\nW       weekly frequency\nME      month end frequency\nSME     semi-month end frequency (15th and end of month)\nBME     business month end frequency\nCBME    custom business month end frequency\nMS      month start frequency\nSMS     semi-month start frequency (1st and 15th)\nBMS     business month start frequency\nCBMS    custom business month start frequency\nQE      quarter end frequency\nBQE     business quarter end frequency\nQS      quarter start frequency\nBQS     business quarter start frequency\nYE      year end frequency\nBYE     business year end frequency\nYS      year start frequency\nBYS     business year start frequency\nh       hourly frequency\nbh      business hour frequency\ncbh     custom business hour frequency\nmin     minutely frequency\ns       secondly frequency\nms      milliseconds\nus      microseconds\nns      nanoseconds\n</code></pre></p>"}]}